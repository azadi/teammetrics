#!/usr/bin/python

### Regarding performance: JSON file storing commit IDs and just fetch newer commits

import ast
import logging
import json
import os
import re
import sys
import subprocess
import ConfigParser

webdir='/srv/alioth.debian.org/chroot/home/groups/teammetrics/htdocs/commitstats'
outputfile=webdir+'/commits.json'

# FIXME: Should be solved with config file
NATIVEPROJECTS=['d-i', 'blends', 'fai', 'debtags' ]
NOPACKAGE=['d-i', 'debian-cd', 'debconf-video', 'debtags', 'fai', 'kernel']
pkggcmd=['git', 'log', '--no-merges', '--date=short', '--pretty=format:''{"commit_id":"%H", "name":"%an", "e-mail":"%ae", "commit_date":"%ad"}''', '--', 'debian']
nativgcmd=['git', 'log', '--no-merges', '--date=short', '--pretty=format:''{"commit_id":"%H", "name":"%an", "e-mail":"%ae", "commit_date":"%ad"}''']

LOG_FILE = 'commitstat.log'
LOG_SAVE_DIR = os.path.expanduser("~")+ '/log'
LOG_FILE_PATH = os.path.join(LOG_SAVE_DIR, LOG_FILE)

CONF_FILE = 'commitinfo.conf'
CONF_FILE_PATH = os.path.join(os.path.expanduser("~") + '/etc/teammetrics', CONF_FILE)

svncommit_re = re.compile('^(r\d+)\s*\|\s*([^ ]+)\s*\|\s*([-0-9]+)\s.*')
svnpackage_re_initial = re.compile('^ini.*')
svnpackage_re0 = re.compile('^\s*[DAM]\s+.*/packages/([^/^ ]+)/(branch|tags|trunk).*')
svnpackage_re1 = re.compile('^\s*[DAM]\s+.*/packages.*/([^/^ ]+)/(branch|tags|trunk).*')
svnpackage_re2 = re.compile('^\s*[DAM]\s+.*/([^/^ ]+/[^/^ ]+/[^/^ ]+)/debian[:/].*')
svnpackage_re3 = re.compile('^\s*[DAM]\s+.*/([^/^ ]+/[^/^ ]+)/debian[:/].*')
svnpackage_re4 = re.compile('^\s*[DAM]\s+.*/([^/]+/[^/]+)/debian/.*') # Debichem is using a different layout
svnpackage_re5 = re.compile('^\s*[DAM]\s+.*/packages/([^/]+/[bt][ar][agu][ns][^/]*)/debian.*')
svnpackage_re6 = re.compile('^\s*[DAM]\s+.*/tags/([^/^ ]+)/.*')
svnpackage_re7 = re.compile('^\s*[DAM]\s+/([^/^ ]+)/tags/.*/([^/^ ]+)/trunk.*')
svnpackage_re8 = re.compile('^\s*[DAM]\s+/branches.*/([^/^ ]+).*/trunk/([^/^ ]+)[:/].*')
svnpackage_re_lastchance = re.compile('^[^/]+/([^/]+)$')
svnpackage_re_lastchance2 = re.compile('^([^/^ ]+)/.+/([^/^ ]+)$')
gitcommit_re = re.compile('^{"commit_id":"(.+)", "name":"(.*)", "e-mail":"(.*)", "commit_date":"([-0-9]+)"}$')
gitcheckduplicate_re = re.compile('^.*/(\w+).git/(\w+).git$')

def get_configuration():
    """Read configuration data of repositories whose logs have to be fetched.
    This function returns a list of the teams specified in the configuration
    file. The list is flattened and the section name is stripped.
    """

    config = ConfigParser.SafeConfigParser()
    config.read(CONF_FILE_PATH)
    # Get the names for the mailing lists from the config file.
    sections = config.sections()

    # Create a mapping of the list name to the address(es).
    team_names = {}
    for section in sections:
        teams = []
        # In case the url and lists options are not found, skip the section.
        try:
            team = config.get(section, 'team').splitlines()
        except ConfigParser.NoOptionError as detail:
            logging.error(detail)
            continue
        if not team:
            logging.error('Team option cannot be empty in %s' % section)
            continue

        # Mapping of list-name to list URL (or a list of list-URLs).
        teams.append(team)
        # Flatten the list..
        teams = sum(teams, [])
        team_names[section] = teams

    if not team_names:
        logging.error('No team(s) found in %s' % CONF_FILE)
        sys.exit(1)

    teams = []
    for section, team_name in team_names.iteritems():
        for each_team in team_name:
            teams.append(each_team)

    return teams

def start_logging():
    """Initialize the logger."""
    logging.basicConfig(filename=LOG_FILE_PATH,
                        level=logging.INFO,
                        format='%(asctime)s %(levelname)s: %(message)s')

def to_unicode(commit, encoding='utf-8'):
    value=commit['name']
    if isinstance(value, str):
        try:
            return value.decode(encoding)
        except UnicodeDecodeError, err:
            try:
                return value.decode('latin-1')
            except UnicodeDecodeError, err:
                logging.error("type(value) = %s; isinstance(value, str) = %s; err = %s" % (str(type(value)), str(isinstance(value, str)), str(err)))
                logging.error(commit)
                return '???'
    else:
        return unicode(value)

def get_git_commits(project):
    data=[]
    if project == 'debconf':
        # This is the Git archive of the package debconf rather than the Debian Conference team
        return data
    gitbase='/git/'+project
    if not os.path.isdir(gitbase):
        logging.warning('No such directory %s.  Ignore Git repositories of %s.' % (gitbase, project))
        return []
    gitdirs=os.popen('find %s -type d -name "*[-a-z0-9+].git" 2>/dev/null' % gitbase)
    packages=[]
    if project in NATIVEPROJECTS:
        gcmd=nativgcmd
        logging.info('Project %s is Debian native project' % project)
    else:
        gcmd=pkggcmd
    for gitr in gitdirs.readlines():
        gdata = {}
        gitr = gitr.strip()
        if not os.path.isdir(gitr):
            logging.error('%s is no directory.' % gitr)
            continue
        if gitcheckduplicate_re.match(gitr):
            # pkg-kde has ./kde-applications/kollision.git/kollision.git which leads to duplicated commit_ids
            logging.warning('Suspicious repository %s of project %s ignored' % (gitr, project))
            continue
        package = re.sub("^.*/([^/]*)\.git", '\\1', gitr)
        if package in packages:
            logging.info("Ignore duplicated package in project %s: %s (%s)" % (project, package, gitr))
            continue
        gdata['package'] = package
        gdata['commits'] = []
        try:
            gitcom = subprocess.Popen(gcmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=gitr)
        except OSError, err:
            logging.error(str(err))
            continue
        #gitcom.wait()
        (stdoutdata, stderrdata) = gitcom.communicate()
        if len(stderrdata) != 0:
            errdata = str(stderrdata).strip()
            if errdata.endswith("fatal: bad default revision 'HEAD'"):
                logging.warning("Git repository of project %s package %s not initialised" % (project, package))
                continue
            if errdata.endswith("fatal: Not a git repository (or any parent up to mount point /srv)"):
                logging.warning("No git repository in dir %s of project %s" % (gitr, project))
                continue
            logging.error('Problem when fetching Git commits of project %s package %s: %s' % (project, package, errdata))
        if len(stdoutdata) == 0:
            if len(stderrdata) != 0:
                continue
            logging.warning('Git log returned no data in project %s package %s ... make sure we are on branch master' % (project, package))
            gcmdm=['git', 'log', 'master', '--no-merges', '--date=short', '--pretty=format:''{"commit_id":"%H", "name":"%an", "e-mail":"%ae", "commit_date":"%ad"}''', '--', 'debian']
            gitcom = subprocess.Popen(gcmdm, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=gitr)
            (stdoutdata, stderrdata) = gitcom.communicate()
            if len(stderrdata) != 0:
                logging.error('Problem when fetching Git commits of project %s package %s: %s' % (project, package, str(stderrdata).strip()))
            if len(stdoutdata) == 0:
                if gitr.find("/packages/") != -1:
                    # for instance in Debian Science the subdir packages contains definitely packages and these should contain a debian/ dir
                    logging.warning('Git log returned no data in project %s package %s and %s should contain a package' % (project, package, gitr))
                    continue
                logging.warning('Git log returned no data in project %s package %s ... do not restrict to debian/ dir only' % (project, package))
                gcmda=['git', 'log', '--no-merges', '--date=short', '--pretty=format:''{"commit_id":"%H", "name":"%an", "e-mail":"%ae", "commit_date":"%ad"}''']
                gitcom = subprocess.Popen(gcmda, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=gitr)
                (stdoutdata, stderrdata) = gitcom.communicate()
                if len(stderrdata) != 0:
                    logging.error('Problem when fetching Git commits of project %s package %s: %s' % (project, package, str(stderrdata).strip()))
                if len(stdoutdata) == 0:
                    logging.warning('Git log returned no data in project %s package %s: Empty repository?' % (project, package))
                    continue
        for com in stdoutdata.split('\n'):
            try:
                commit = ast.literal_eval(com)
            except SyntaxError:
                # some people have fun to spell their nicknames with "" pairs ...
                m = gitcommit_re.match(com)
                if not m:
                    logging.error('Problem importing single commit in project %s package %s: %s' % (project, package, str(com)))
                    continue
                commit = {}
                commit['commit_id']   = m.group(1)
                commit['name']        = m.group(2)
                commit['e-mail']      = m.group(3)
                commit['commit_date'] = m.group(4)
            commit['name'] = to_unicode(commit)
            gdata['commits'].append(commit)
        logging.debug("project %s package %s Git done" % (project, package))
        data.append(gdata)
        packages.append(package)
    return data

def get_svn_commits(project):
    data=[]
    # option -r 1:HEAD does some pre-sorting
    scmd='svn log --verbose -r 1:HEAD svn://localhost/svn/'+project+' 2> /dev/null'
    # here we use os.popen since subprocess.Popen() does not seem to end :-(
    svnout = os.popen(scmd)
    ids=[]
    found_pkg=-1
    for com in svnout.readlines():
        com = com.strip()
        if com == '':
            continue
        p = svnpackage_re_initial.match(com.lower()) # if string starts with "initial" we can ignore this
	if p or com.startswith('-----------------------'): # make sure we really trigger the write
	    try:
	        if not commit.has_key('package'):
                    commit['package'] = ''
                    # print commit
            except UnboundLocalError: # First log line is also '^------'
                continue
            found_pkg=1
            continue
        m = svncommit_re.match(com)
        if m:
            if m.group(1) in ids:
                logging.info("Ignore duplicated commit in project %s: %s" % (project, com))
                continue
            ids.append(m.group(1))
            if found_pkg == 0:
                logging.warning("No package found for commit_id %s in project %s" % (commit['commit_id'], project))
                data.append(commit)
            commit = {}
            commit['commit_id']   = m.group(1)
            commit['name']        = m.group(2)
            commit['commit_date'] = m.group(3)
            commit['package']     = ''
            found_pkg=0
        else:
            if found_pkg > 0: # FIXME: we simply take the first package that was mentioned.
                              #  Note that in SVN more than one package can be changed per commit
                continue
            if project in NOPACKAGE:
                continue
            if com.find('/') == -1:	# there must be at least one '/' in the string to detect a package
                continue
            p = svnpackage_re0.match(com)
            if not p:
                p = svnpackage_re1.match(com)
                if not p:
                    p = svnpackage_re2.match(com)
                    if not p:
                        p = svnpackage_re3.match(com)
                        if not p:
                            p = svnpackage_re4.match(com)
                            if not p:
                                p = svnpackage_re5.match(com)
                                if not p:
                                    p = svnpackage_re6.match(com)
                                    if not p:
                                        p = svnpackage_re7.match(com)
                                        if not p:
                                            p = svnpackage_re8.match(com)
                                            if not p:
                                                continue
                                            if p.group(1) != p.group(2):
                                                logging.warning("branches and trunk found but different package strings %s != %s (com='%s', id='%s')" % (p.group(1), p.group(2), com, commit['commit_id']))
                                                continue
                                        else:
                                            if p.group(1) != p.group(2):
                                                logging.warning("tag and trunk found but different package strings %s != %s (com='%s', id='%s')" % (p.group(1), p.group(2), com, commit['commit_id']))
                                                continue

            found_pkg += 1
            px=p.group(1)
            if px.find('/') == -1:
                pkg=px
            elif px.endswith('/trunk'):
                pkg=re.sub('.*/([^/]+)/trunk', '\\1', px)
                pkg=re.sub('^([^/]+)/trunk', '\\1', pkg)
            elif px.find('/branches') != -1:
                pkg=re.sub('^([^/]+)/branches/.*', '\\1', px)
                pkg=re.sub('^([^/]+)/branches', '\\1', pkg)
            elif px.find('/branch') != -1:
                pkg=re.sub('^([^/]+)/branch.*', '\\1', px)
                pkg=re.sub('.*/([^/]+)/branch.*', '\\1', pkg)
            elif px.endswith('/tags'):
                pkg=re.sub('.*/([^/]+)/tags', '\\1', px)
            elif px.find('/tags/') != -1:
                pkg=re.sub('^([^/]+)/tags.*', '\\1', px)
            elif px.find('tags/') != -1:
                pkg=re.sub('.*tags/([^/]+)/.*', '\\1', px)
            elif px.find('/trunk') != -1:
                pkg=re.sub('.*/([^/]+)/trunk', '\\1', px)
                pkg=re.sub('^([^/]+)/trunk.*', '\\1', pkg)
            elif px.find('packages/') != -1:
                pkg=re.sub('.*packages/([^/]+).*', '\\1', px)
            elif px.find('experimental/') != -1:
                pkg=re.sub('^.*experimental/([^/]+)', '\\1', px)
            elif px.find('unstable/') != -1:
                pkg=re.sub('^.*unstable/([^/]+)', '\\1', px)
            elif px.find('wnpp/') != -1:
                pkg=re.sub('^.*wnpp/([^/]+)', '\\1', px)
            elif px.find('non-free/') != -1:
                pkg=re.sub('^.*non-free/([^/]+)', '\\1', px)
            elif px.find('lenny/') != -1:
                pkg=re.sub('^.*lenny/([^/]+)', '\\1', px)
            elif px.find('trunk/') != -1:
                pkg=re.sub('.*trunk/([^/]+)/.*', '\\1', px)
                pkg=re.sub('.*trunk/([^/]+)', '\\1', pkg)
            elif px.startswith('ubuntu/'):
                pkg=re.sub('^ubuntu/[^/]+/([^/]+)$', '\\1', px)
                pkg=re.sub('^ubuntu/([^/]+)$', '\\1', pkg)
            else:
                # if a string repeats twice we guess it might be the package name
                py=re.sub('^([^/]+)/.*', '\\1', px)
                if px.startswith('%s/%s' % (py, py)):
                    pkg=py
                else:
                    q = svnpackage_re_lastchance.match(px)
                    if not q:
                        q = svnpackage_re_lastchance2.match(p.group(1))
                        if not q:
                            logging.warning("No idea how to parse %s in commit %s" % (px, commit['commit_id']))
                            pkg = ''
                        else:
                            if q.group(1) == q.group(2):
                                pkg=q.group(1)
                            else:
                                logging.warning("Strings are not equal in %s (%s!=%s) in commit %s" % (px, q.group(1), q.group(2), commit['commit_id']))
                                pkg = ''
                    else:
                        pkg=q.group(1)
            if pkg.find('/') != -1:
                logging.warning("Slash remains in package name %s (com='%s', px='%s', id='%s')" % (pkg, com, px, commit['commit_id']))
            if pkg.startswith('REL'):
                logging.error("Something is wrong in project %s package name %s (com='%s', px='%s', id='%s')" % (project, pkg, com, px, commit['commit_id']))
            commit['package'] = pkg
            # print commit
            data.append(commit)
    return data

if __name__ == '__main__':
    start_logging()
    logging.info('\t\tStarting CommitStat')

    teams = get_configuration()
    logging.info('Measuring performance of %d teams' % len(teams))
    commitdata=[]
    for project in teams:
        data = {}
        data['project'] = project
        gd = get_git_commits(project)
        if gd:
            data['git'] = gd
        sv = get_svn_commits(project)
        if sv:
            data['svn'] = sv
        commitdata.append(data)
    f = open(outputfile, 'w')
    try:
        print >>f, json.dumps(commitdata, encoding='utf8')
    except UnicodeDecodeError, err:
        logging.error("%s --> try latin1" % str(err))
        print >>f, json.dumps(commitdata, encoding='latin1')
    f.close()
    os.system('bzip2 --force '+outputfile)
